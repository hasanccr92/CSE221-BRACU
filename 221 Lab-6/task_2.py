# -*- coding: utf-8 -*-
"""task-2

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1otnQg8J0BGgX6bC1SpzdJrFF2xyWjyUr
"""

#---------Task-2---------#

file1 = open('task2_input.txt','r')
file2 = open('Task2_output.txt','w')

no_zone = file1.readline()

actual = []
for i in file1.readline()[:-1]:
    actual.append(i)
  
predicted = []
for i in file1.readline():
    predicted.append(i)

zones = {"Y" : "Yasnaya", "P" : "Pochinki", "S" : "School", "R" : "Rozhok", "F" : "Farm", "M" : "Mylta", "H" : "Shelter", "I" : "Prison"}

def LCS(actual, predicted):
    
    m = len(actual)
    n = len(predicted)
    lst = [[None] * (n+1) for i in range(m + 1)]
    seq = []

    for i in range(m+1):
        for j in range(n + 1):
            if(i == 0 or j == 0):
                lst[i][j] = 0
            elif(predicted[i - 1] == actual[j - 1]):
                lst[i][j] = lst[i - 1][j - 1] + 1
            else:
                lst[i][j] = max(lst[i - 1][j], lst[i][j - 1])
    X = m
    Y = n

    while(X and Y > 0):
        if(lst[X][Y] != max(lst[X - 1][Y], lst[X][Y - 1])):
            seq.append(predicted[Y-1])
            X -= 1
            Y -= 1
        else:
            if(lst[X][Y] == lst[X][Y - 1]):
                Y -= 1
            else:
                X -= 1
    return seq, lst

lcs = (LCS(actual, predicted))
seq = lcs[0][::-1]
for i in seq:
    file2.write(zones.get(i)+' ')
lent = (lcs[-1][-1][-1])
correctness = (lent/int(no_zone))*100
file2.write('\nCorrectness of prediction: '+str(correctness)+'%')

file1.close()
file2.close()

